###############################################################################

# What about interview as code?

###############################################################################

# Usage:

#        Add a type of question like [1-9]. <question> | Tips for interviewer

#        Add a question like [1-9].[1-9] <question>

#------------------------------------------------------------------------------

8. General | Check if Keywords in Job Description mentioned in his/her experience, stories and achievements.

8.1 Tell me your experience? Tell me about yourself?

#------------------------------------------------------------------------------

1. Availability | Verify candidates experience for High Availability and Fail-Over

1.1 How do you design for failure?

1.2 How many 9s of availability do you think you can design for?

1.3 How do you monitor application uptime?

1.4 How do you build a self-healing architecture?

#------------------------------------------------------------------------------

2. Scalability | Tips: capacity planning, auto-scaling, S3, ELB mentioned is a good sign

2.1 How would you design our architecture to handle a sudden jump in traffic?

2.2 How do you monitor and manage large-scale events?

2.3 How would you test our systemâ€™s ability to handle a large-scale event?

2.4 How would you right-size our system for normal and peak traffic situations?

#------------------------------------------------------------------------------

3. Performance | Tips: memcached, Redis, CDN mentioned is a good sign

3.1 How do you monitor system performance?

3.2 What are the most important metrics to monitor?

3.3 Tell me about a time your application performance was bounded by something like memory/compute/storage. How did you architect around that?

3.4 How have you utilized caching to improve performance?

#------------------------------------------------------------------------------

4. Problem Solving | Check if ability to identify root cause and utilizing variated tools

4.1 What managed services have you used in the past?

4.2 What is the shortest amount of time you were able to prep a database for development?

4.3 When does it make sense to stop using a managed service and begin self-managing your own cluster?

#------------------------------------------------------------------------------

5. DevOps | Check Infra as code, automation mentioned

5.1 What version control systems have you used in the past? Which ones do you prefer and why? What branching strategy are you using?

5.2 Tell me about a time where you had many people working on the same code base at the same time. How did you do deployments in that environment?

5.3 Can you explain the difference between continuous integration and continuous deployment?

5.4 What kind of DevOps tools have you used in the past? Which ones do you prefer and why?

5.5 What Jenkins plugin used for your CI / CD pipelines?

5.6 Static inventory vs Dynamic inventory in Ansible?

#------------------------------------------------------------------------------

6. AWS | Check AWS experience and trouble shooting skills

6.1. Explain the differences between IaaS, PaaS and SaaS architectures in cloud context (any cloud).

6.2. What AWS service are you going to use if you are required to build a project like AWS console?

6.3 An EC2 instance cannot be added to auto-scaling group. What is the cause?

#------------------------------------------------------------------------------

7. CS / Networking / Security | Check fundamental knowledge and experience

7.1 How do you write a multi-processes shell script?

7.2 Process vs Thread. What web applications are designed as multi-thread applications instead of multi-processes application?

7.3 How does SSH work? What is SSL handshake?

7.4 If one IP was assigned to two different servers, what are going to happen? How do you resolve the problem?

#------------------------------------------------------------------------------